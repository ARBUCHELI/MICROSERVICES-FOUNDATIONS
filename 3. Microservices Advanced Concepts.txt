# MICROSERVICES ADVANCED CONCEPTS
---------------------------------

* Asynchronous communications
-----------------------------
			ASYNCHRONOUS COMMUNICATIONS ARE NOT EASY.


Most often when you hear mentions of asynchronous communications in a microservices architecture, people are specifically referring to event-driven microservices as a way to support 
eventual consistency of the data.

In this model, the services put a message into a asynchronous message broker or a temporary data store and then drive events from this state change.

The downstream event processors will process the data and eventually cause the data to be stored in its final data store.


			STREAM DATA PLATFORMS ARE A VERY STRONG PATTERN WHEN BUILDING OUT A LARGE SYSTEM ESPECIALLY WITH MANY DIFFERENT BUT INTERESTING OPERATIONS.

			ONE OF THE MOST OVERLOOKED PATTERN IN THIS SPACE IS THE TRANSITION FROM PURE SYNCHRONOUS OPERATIONS TO A SYNCHRONOUS PROCESSING.

			WHEH MOVING TO SYNCHRONOUS OPERATIONS, YOU NEED TO TAKE CARE TO HANDLE ERROR STATES CORRECTLY.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Logging and tracing in a microservices architecture
-----------------------------------------------------
One of the hardest operational problems to solve in a microservices architecture is evaluating call chains and aggregating logging associated to those call chains.

			PLAN FOR UNIFIED LOGGING STRATEGIES ACROSS YOUR ENTIRE PLATFORM.


* Benefits of Unified Logging
----------------------------- 
. Evaluation of day-to-day operations.

. Troubleshooting.

. Maintenance.

			LOGGING CAN BECOME DIFFICULT IN A MICROSERVICES ENVIRONMENT.


			MOVING TO A DISTRIBUTED SYSTEM INCREASES THE NEED FOR CONVERGENCE IN YOUR LOGGING BEHAVIORS.

			PART OF MAKING LOGGING MORE POWERFUL IN A DISTRIBUTED ENVIRONMENT IS THE ABILITY TO DETERMINE THE ACTUAL FLOW, NOT ONLY THROUGH YOUR SERVICE BUT THROUGH THE 
			SYSTEM AS A WHOLE.

			* TRACING: Is the solution to this problem.  
				. Creating a trace (token): Use that trace in all internal logging events for that call stack.

			THE TRACE ID EXISTS IN ALL OF THE LOG MESSAGES, FOR ALL SERVICES THROUGHOUT THE SYSTEM FOR A GIVEN CALL STACK.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Continuous delivery as a requirement
--------------------------------------
One of the goals of microservices is agility.

			* WRITING CODE IS ONLY ONE ASPECT OF THE SOFTWARE DEVELOPMENT LIFECYCLE.

			* INVEST TIME IN BUILDING OUT A CONTINUOUS DELIVERY MODEL EARLY.

			* CHANCES OF SUCCESS DIMINISH WITHOUT AUTOMATED BUILDING AND DEPLOYING OF SERVICES.

			
* CI/CD PIPELINES
-----------------
A CI/CD pipeline starts with the most basic aspects of building your committed code base in an automated fashion.

Building your code can be as simple as executing a script that manages the build cycle itself or as complex as a large distributed model of containerization and sandbox build operations.

The build step compiles and often executes unit tests to ensure that the code is ready for further testing and deployment.

Once the build step has completed, we often add a step of automated deployment to a non-production environment.

This automated deployment step moves the compiled artifact to a runtime that often mimics production but does not take production traffic.

In this environment we often run integration and system tests as well as security-focused penetration tests.

These tests should provide a clear indication of the safety of moving the code to production.

When the code has been sufficiently validated, it will be deployed to production.

			THE GOAL OF MICROSERVICES IS AGILITY

			
* Make Agility a Priority
-------------------------
. Start small

. Consider intergration of testing frameworks






























