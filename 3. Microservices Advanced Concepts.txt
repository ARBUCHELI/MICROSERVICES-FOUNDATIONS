# MICROSERVICES ADVANCED CONCEPTS
---------------------------------

* Asynchronous communications
-----------------------------
			ASYNCHRONOUS COMMUNICATIONS ARE NOT EASY.


Most often when you hear mentions of asynchronous communications in a microservices architecture, people are specifically referring to event-driven microservices as a way to support 
eventual consistency of the data.

In this model, the services put a message into a asynchronous message broker or a temporary data store and then drive events from this state change.

The downstream event processors will process the data and eventually cause the data to be stored in its final data store.


			STREAM DATA PLATFORMS ARE A VERY STRONG PATTERN WHEN BUILDING OUT A LARGE SYSTEM ESPECIALLY WITH MANY DIFFERENT BUT INTERESTING OPERATIONS.

			ONE OF THE MOST OVERLOOKED PATTERN IN THIS SPACE IS THE TRANSITION FROM PURE SYNCHRONOUS OPERATIONS TO A SYNCHRONOUS PROCESSING.

			WHEH MOVING TO SYNCHRONOUS OPERATIONS, YOU NEED TO TAKE CARE TO HANDLE ERROR STATES CORRECTLY.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Logging and tracing in a microservices architecture
-----------------------------------------------------
One of the hardest operational problems to solve in a microservices architecture is evaluating call chains and aggregating logging associated to those call chains.

			PLAN FOR UNIFIED LOGGING STRATEGIES ACROSS YOUR ENTIRE PLATFORM.


* Benefits of Unified Logging
----------------------------- 
. Evaluation of day-to-day operations.

. Troubleshooting.

. Maintenance.

			LOGGING CAN BECOME DIFFICULT IN A MICROSERVICES ENVIRONMENT.


			MOVING TO A DISTRIBUTED SYSTEM INCREASES THE NEED FOR CONVERGENCE IN YOUR LOGGING BEHAVIORS.

			PART OF MAKING LOGGING MORE POWERFUL IN A DISTRIBUTED ENVIRONMENT IS THE ABILITY TO DETERMINE THE ACTUAL FLOW, NOT ONLY THROUGH YOUR SERVICE BUT THROUGH THE 
			SYSTEM AS A WHOLE.

			* TRACING: Is the solution to this problem.  
				. Creating a trace (token): Use that trace in all internal logging events for that call stack.

			THE TRACE ID EXISTS IN ALL OF THE LOG MESSAGES, FOR ALL SERVICES THROUGHOUT THE SYSTEM FOR A GIVEN CALL STACK.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

