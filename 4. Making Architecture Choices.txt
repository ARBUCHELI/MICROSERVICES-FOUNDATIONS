# 4. MAKING ARCHITECTURE CHOICES
--------------------------------

* Design considerations
-----------------------

* Microservice Design Key Considerations
----------------------------------------
1 Continuous integration and delivery pipelines

	(DONT WRITE ANY CODE UNTIL YOU HAVE A PLAN ON HOW YOU WILL HANDLE THESE TASKS)

	THIS SHOULD BE THE TASK NUMBER ONE.

	MODEL A SAMPLE PIPELINE AND ENSURE YOU HAVE THE MOST CRITICAL STEPS OF YOUR SDLS DOCUMENTED AND AUTOMATED, IF POSSIBLE.



2. Logging, telemetry, and tracing frameworks.

	CONSIDER USING LOG AGGREGATORS AND LOG SEARCH MECHANISMS.



3. Domain-dirven design.



4. Latency evaluation and control.


		* STANDARIZATION WILL ALLOW YOU TO SHIFT RESOURCES MORE EASILY AS NEEDS CHANGE.



5. Asynchronous design to start.
	
	TRY TO CREATE EVERY SERVICE AS A ASYNCHRONOUS OPERATION UNTIL YOU PROVE THAT YOU NEED IN SYNCRONOUSLY.

	HAVING A SOLID PLAN FOR ASYNCHRONOUS WILL REDUCE LATENCY AS A WHOLE BUT WILL ALLOW YOU TO IMPROVE YOUR SKILLS ON THESE OPERATIONS.

		* DESIGNING A MICROSERVICES ARCHITECTURE IS LESS ABOUT THE CODE, AND MORE ABOUT THE SUPPORTING PROCESSES, OPERATIONS, AND INFRASTRUCTURE.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The tradeoffs
---------------

CONS					PROS
----					----
. Distribution tax cost			. Well-defined module boundaries

					. Easy path to scale your system







			* THE ABILITY TO SCALE INCREASES THE COMPLEXITY OF DEPLOYOMENTS.

			* DESPITE ADDED COMPLEXITY THERE ARE BENEFITS ASSOCIATED WITH SCALE AND WASTE REDUCTION.

			* EMBRANCING POLYGLOT DEVELOPMENT MAKES MANAGEMENT MORE DIFFICULT.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* An argument for edge services
-------------------------------
			* API layer should only be used as a proxy layer.

			
* Edge services
---------------

. Outbound
----------
Used to expose your client-specific needs to the outside world.

You can use an API gateway.



. Inbound or Translation
------------------------
Designed to abstract you from third-party dependencies.
	
You minimize the impact of changes.



. Key Benefits of Edge Services
-------------------------------
. Easier transformation management.

. Provide clients a consistent interface.



------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Embracing DevOps
------------------
			* NEVER UNDERESTIMATE CULTURE.

			* MOST OF THE ISSUES FROM MICROSERVICES CAN BE SEEN AS OPERATIONAL ISSUES.

			
MONITOR A MICROSERVICES SYSTEM TO ENSURE LAG DOESN'T HAVE MAJOR IMPACTS.

			* AUTOMATION OF DEPLOYMENTS AND TESTING IMPROVES THE AGILITY OF THE TEAM AND INCREASES THROUGHPUT.

			* AUTOMATE IS MANDATORY.

			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Monolithic microservices
--------------------------
			* MANY TIMES, ESPECIALLY IN EARLY-STAGE STARTUPS, THE CONCEPT OF MICROSERVICES IS JUST TOO MUCH FOR A SMALL TEAM TO DEAL WITH.

			* THERE ARE HOWEVER, VERY SPECIFIC STEPS YOU CAN TAKE TO PREPARE A MONOLITH EARLY FOR AN EVENTUAL BREAKUP AS NEEDED.


* Prepare Early to Break Up a Monolith
--------------------------------------
. Start at lowes point and build out data to be broken up.

. Expose domains with solid APIs.

. Encapsulate as many potential services as possible.

			* THE KEY IS KEEPING A SCALABLE AND DISTRIBUTABLE SYSTEM IN MIND AT EVERY STEP OF THE WAY.


* Real-World Use Cases
----------------------
. Small team.

. Small application.






















































